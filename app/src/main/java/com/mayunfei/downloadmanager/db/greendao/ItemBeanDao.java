package com.mayunfei.downloadmanager.db.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.mayunfei.downloadmanager.db.ItemBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ITEM_BEAN".
*/
public class ItemBeanDao extends AbstractDao<ItemBean, Long> {

    public static final String TABLENAME = "ITEM_BEAN";

    /**
     * Properties of entity ItemBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BundleId = new Property(1, long.class, "bundleId", false, "BUNDLE_ID");
        public final static Property TotalSize = new Property(2, long.class, "totalSize", false, "TOTAL_SIZE");
        public final static Property CompletedSize = new Property(3, long.class, "completedSize", false, "COMPLETED_SIZE");
        public final static Property Path = new Property(4, String.class, "path", false, "PATH");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
        public final static Property Status = new Property(6, int.class, "status", false, "STATUS");
    }

    private Query<ItemBean> bundleBean_ItemBeansQuery;

    public ItemBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ItemBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ITEM_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"BUNDLE_ID\" INTEGER NOT NULL ," + // 1: bundleId
                "\"TOTAL_SIZE\" INTEGER NOT NULL ," + // 2: totalSize
                "\"COMPLETED_SIZE\" INTEGER NOT NULL ," + // 3: completedSize
                "\"PATH\" TEXT," + // 4: path
                "\"URL\" TEXT," + // 5: url
                "\"STATUS\" INTEGER NOT NULL );"); // 6: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ITEM_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ItemBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBundleId());
        stmt.bindLong(3, entity.getTotalSize());
        stmt.bindLong(4, entity.getCompletedSize());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(5, path);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
        stmt.bindLong(7, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ItemBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBundleId());
        stmt.bindLong(3, entity.getTotalSize());
        stmt.bindLong(4, entity.getCompletedSize());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(5, path);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
        stmt.bindLong(7, entity.getStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ItemBean readEntity(Cursor cursor, int offset) {
        ItemBean entity = new ItemBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // bundleId
            cursor.getLong(offset + 2), // totalSize
            cursor.getLong(offset + 3), // completedSize
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // path
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // url
            cursor.getInt(offset + 6) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ItemBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBundleId(cursor.getLong(offset + 1));
        entity.setTotalSize(cursor.getLong(offset + 2));
        entity.setCompletedSize(cursor.getLong(offset + 3));
        entity.setPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ItemBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ItemBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ItemBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "itemBeans" to-many relationship of BundleBean. */
    public List<ItemBean> _queryBundleBean_ItemBeans(long bundleId) {
        synchronized (this) {
            if (bundleBean_ItemBeansQuery == null) {
                QueryBuilder<ItemBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BundleId.eq(null));
                bundleBean_ItemBeansQuery = queryBuilder.build();
            }
        }
        Query<ItemBean> query = bundleBean_ItemBeansQuery.forCurrentThread();
        query.setParameter(0, bundleId);
        return query.list();
    }

}
